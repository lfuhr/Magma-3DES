// load "file_read.magma";
load "tables.magma";

function invert_permutation(perm)
	inverse := [1..#perm];
	for i in [1..#perm] do
		inverse[perm[i]] := i;
	end for;
	return inverse;
end function;

IP_inverse := invert_permutation(IP);
// 1823743426 eq permute_integer(permute_integer(1823743426, IP),IP_inverse);

function enc_triple_DES(input, k1, k2, k3)
	return enc_DES(k3, dec_DES( k2, enc_DES(k1, input)));
end function;

function dec_triple_DES()
end function;

// Fuhr
function enc_DES(key, input)
	L0R0 := input^ip;
	L := L0R0[1..32];
	R := L0R0[33..64];
	keys := generate_keys(key);

	for i in [1 .. 16] do
		L_old := L;
		R_old := R;
		L := R_old;
		R := L_old + cipher_function(R_old, keys[i]);
    end for;

    return (R cat L)^ip;
end function;

function dec_DES(key, input)
end function;

function cipher_function(bits, key)
	return permutation( substitution( expansion(bits), key) );
end function;

function expansion()
end function;

function substitution()
end function;

function permutation()
end function;

function split_data()
end function;

function concatenate_data()
end function;

// Fuhr
function permute_integer(n, perm)
	r := 0;
	for i in [1..#perm] do
		if BitwiseAnd(n, 2^(#perm - i)) ne 0 then
			r +:= 2^(perm[i] - 1);
		end if;
	end for;
	return r;
end function;
// permute_integer(StringToInteger("1000000000000000000000000", 2), IP); // -> 1