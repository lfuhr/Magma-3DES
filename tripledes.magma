load "tables.magma";
load "innerFunction.magma";
load "keyscheduling.magma";

// Marco Kolodziej
// Laden der Permutationen aus G64
// Um einen Vektor zu Permutieren muss nun <Vektor>^Permutation genommen werden
// Bsp: K:=FiniteField(2);
// V64:=VectorSpace(K, 64);
// t:=[Random(K):i in [1..64]];
// t^IP;
// ElementarBeispiel: t2:=[i: i in [1..64]];
// t2^IP; -> Werte stehen in der Reihenfolge wie in der Tabelle aus fips für IP
// IP_INVERSE natürlich analog.
G64:=Sym(64);
IP_INVERSE:=G64!ip; // Uncanny Magma behavior
IP:=Inverse(IP_INVERSE);

// Fuhr
function ks(K)
	keys := [];
	c := Vector(GF(2),[K[position] : position in C0 cat D0]);
	shift := Sym(56)!([28] cat [1..27] cat [56] cat [29..55]);
	for i in [1..16] do
		c := c^shift;
		if not i in [1,2,9,16] then // again
			c := c^shift;
		end if;
		out := Vector(GF(2),[c[position] : position in PC2]);
		keys := Append(keys, out);
	end for;
	return keys;
end function;

// function key_schedule(key)
// 	return [
// 	    Vector(GF(2),[0,0,0,0,1,0,1,1,0,0,0,0,0,0,1,0,0,1,1,0,0,1,1,1,1,0,0,1,1,0,1,1,0,1,0,0,1,0,0,1,1,0,1,0,0,1,0,1]),
// 	    Vector(GF(2),[0,1,1,0,1,0,0,1,1,0,1,0,0,1,1,0,0,1,0,1,1,0,0,1,0,0,1,0,0,1,0,1,0,1,1,0,1,0,1,0,0,0,1,0,0,1,1,0]),
// 	    Vector(GF(2),[0,1,0,0,0,1,0,1,1,1,0,1,0,1,0,0,1,0,0,0,1,0,1,0,1,0,1,1,0,1,0,0,0,0,1,0,1,0,0,0,1,1,0,1,0,0,1,0]),
// 	    Vector(GF(2),[0,1,1,1,0,0,1,0,1,0,0,0,1,0,0,1,1,1,0,1,0,0,1,0,1,0,1,0,0,1,0,1,1,0,0,0,0,0,1,0,0,1,0,1,0,1,1,1]),
// 	    Vector(GF(2),[0,0,1,1,1,1,0,0,1,1,1,0,1,0,0,0,0,0,0,0,0,0,1,1,0,0,0,1,0,1,1,1,1,0,1,0,0,1,1,0,1,1,0,0,0,0,1,0]),
// 	    Vector(GF(2),[0,0,1,0,0,0,1,1,0,0,1,0,0,1,0,1,0,0,0,1,1,1,1,0,0,0,1,1,1,1,0,0,1,0,0,0,0,1,0,1,0,1,0,0,0,1,0,1]),
// 	    Vector(GF(2),[0,1,1,0,1,1,0,0,0,0,0,0,0,1,0,0,1,0,0,1,0,1,0,1,0,0,0,0,1,0,1,0,1,1,1,0,0,1,0,0,1,1,0,0,0,1,1,0]),
// 	    Vector(GF(2),[0,1,0,1,0,1,1,1,1,0,0,0,1,0,0,0,0,0,1,1,1,0,0,0,0,1,1,0,1,1,0,0,1,1,1,0,0,1,0,1,1,0,0,0,0,0,0,1]),
// 	    Vector(GF(2),[1,1,0,0,0,0,0,0,1,1,0,0,1,0,0,1,1,1,1,0,1,0,0,1,0,0,1,0,0,1,1,0,1,0,1,1,1,0,0,0,0,0,1,1,1,0,0,1]),
// 	    Vector(GF(2),[1,0,0,1,0,0,0,1,1,1,1,0,0,0,1,1,0,0,0,0,0,1,1,1,0,1,1,0,0,0,1,1,0,0,0,1,1,1,0,1,0,1,1,1,0,0,1,0]),
// 	    Vector(GF(2),[0,0,1,0,0,0,0,1,0,0,0,1,1,1,1,1,1,0,0,0,0,0,1,1,0,0,0,0,1,1,0,1,1,0,0,0,1,0,0,1,0,0,1,1,1,0,1,0]),
// 	    Vector(GF(2),[0,1,1,1,0,0,0,1,0,0,1,1,0,0,0,0,1,1,1,0,0,1,0,1,0,1,0,0,0,1,0,1,0,1,0,1,1,1,0,0,0,1,0,1,0,1,0,0]),
// 	    Vector(GF(2),[1,0,0,1,0,0,0,1,1,1,0,0,0,1,0,0,1,1,0,1,0,0,0,0,0,1,0,0,1,0,0,1,1,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0]),
// 	    Vector(GF(2),[0,1,0,1,0,1,0,0,0,1,0,0,0,0,1,1,1,0,1,1,0,1,1,0,1,0,0,0,0,0,0,1,1,1,0,1,1,1,0,0,1,0,0,0,1,1,0,1]),
// 	    Vector(GF(2),[1,0,1,1,0,1,1,0,1,0,0,1,0,0,0,1,0,0,0,0,0,1,0,1,0,0,0,0,1,0,1,0,0,0,0,1,0,1,1,0,1,0,1,1,0,1,0,1]),
// 	    Vector(GF(2),[1,1,0,0,1,0,1,0,0,0,1,1,1,1,0,1,0,0,0,0,0,0,1,1,1,0,1,1,1,0,0,0,0,1,1,1,0,0,0,0,0,0,1,1,0,0,1,0])
// 	];
// end function;

// Fuhr
function enc_DES(input, key : dec:=false)
	L0R0 := input^IP;
	L := Vector(Submatrix(L0R0, 1, 1, 1, 32));
	R := Vector(Submatrix(L0R0, 1, 33, 1, 32));
	keys := keyscheduling(key);
	// keys := ks(key);

	if dec then
		// R is left side  and  L is right side.
		keys := Reverse(keys);
	end if;

	for i in [1 .. 16] do
		L_old := L;
		R_old := R;
		L := R_old;
		R := L_old + inner_f(R_old, keys[i]);
    end for;

    return Vector(HorizontalJoin(R, L)^IP_INVERSE);
end function;

// Fuhr
function dec_DES(input, key)
	return enc_DES(input, key : dec:=true);
end function;

// Fuhr
function enc_triple_DES(plaintext, k1, k2, k3)
	return enc_DES(dec_DES(enc_DES(plaintext, k1), k2), k3);
end function;

// Fuhr
function dec_triple_DES(cipher, k1, k2, k3)
	return dec_DES(enc_DES(dec_DES(cipher, k3), k2), k1);
end function;