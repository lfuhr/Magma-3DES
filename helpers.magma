
// Fuhr
function hex_to_bitvector(hex)
	n := #hex;
	assert n mod 2 eq 0;
	vec := VectorSpace(GF(2), n*4)!0;
	for i in [1..n] do
		for j in [1..4] do
			vec[(i-1)*4+j] := StringToInteger(hex[i], 16) div (2^(4-j));
		end for;
	end for;
	return vec;
end function;

// Fuhr
function bitvector_to_hex(bitvector)
	n := OverDimension(bitvector);
	assert n mod 8 eq 0;
	str := "";
	for i in [4*k : k in [0..n/4-1]] do
		byte := 0;
		for j in [1..4] do
			byte +:= Integers()!bitvector[i+j] * 2^(4-j);
		end for;
		str cat:= IntegerToString(byte, 16);
	end for;
	return str;
end function;
// bitvector_to_hex(hex_to_bitvector("00CAFE00"));

// Fuhr
function enc_triple_DES_openSSL(plaintext, key)
	WriteHex(plaintext, "plaintext");
	System("openssl enc -des-ede3 -nopad -K " cat key cat " -in plaintext -out cipher");
	return ReadHex("cipher");
end function;

// Fuhr
function dec_triple_DES_openSSL(cipher, key)
	WriteHex(cipher, "plaintext");
	System("openssl enc -des-ede3 -nopad -K " cat key cat " -in plaintext -out plaintext");
	return ReadHex("plaintext");
end function;

// Fuhr
function enc_DES_openSSL(plaintext, key)
	WriteHex(plaintext, "plaintext");
	System("openssl enc -des-ecb -nopad -K " cat key cat " -in plaintext -out cipher");
	return ReadHex("cipher");
end function;

// Fuhr
function dec_DES_openSSL(cipher, key)
	WriteHex(cipher, "cipher");
	System("openssl enc -des-ecb -nopad -K " cat key cat " -in cipher -out plaintext");
	return ReadHex("plaintext");
end function;