// Fuhr Can be done with Submatrix function
V32 := VectorSpace(GF(2), 32);
L := V32![ L0R0[i] : i in [1..32]];
function concatenate(left, right)
	V64 := VectorSpace(GF(2), 64);
	return V64!([ left[i] : i in [1..32]] cat [ right[i] : i in [1..32]]);
end function;

// Fuhr Integer permutation
IP := [58,50,42,34,26,18,10,2,
	   60,52,44,36,28,20,12,4,
	   62,54,46,38,30,22,14,6,
	   64,56,48,40,32,24,16,8,
	   57,49,41,33,25,17,9,1,
	   59,51,43,35,27,19,11,3,
	   61,53,45,37,29,21,13,5,
	   63,55,47,39,31,23,15,7];
function invert_permutation(perm)
	inverse := [1..#perm];
	for i in [1..#perm] do
		inverse[perm[i]] := i;
	end for;
	return inverse;
end function;
function permute_integer(n, perm)
	r := 0;
	for i in [1..#perm] do
		if BitwiseAnd(n, 2^(#perm - i)) ne 0 then
			r +:= 2^(perm[i] - 1);
		end if;
	end for;
	return r;
end function;
// permute_integer(StringToInteger("1000000000000000000000000", 2), IP); // -> 1