//inputkey ist 64 bit lang
keyscheduling:=function(inputkey)
Ci:=[57, 49, 41, 33, 25, 17, 9,
	 1, 58, 50, 42, 34, 26 ,18,
	 10, 2, 59, 51, 43, 35, 27,
	 19, 11, 3, 60, 52, 44, 36];
Di:=[63, 55, 47, 39, 31, 23, 15,
	7, 62, 54, 46, 38, 30, 22,
	14, 6, 61, 53, 45, 37, 29,
	21, 13, 5, 28, 20, 12, 4];
PC2:=[14, 17, 11, 24, 1, 5,
	3, 28, 15, 6, 21, 10,
	23, 19, 12, 4, 26, 8,
	16, 7, 27, 20, 13, 2,
	41, 52, 31, 37, 47, 55,
	30, 40, 51, 45, 33, 48,
	44, 49, 39, 56, 34, 53,
	46, 42, 50, 36, 29, 32];
//vektor:=function 	
v:=[1..16 by 1];
for i := 1 to 16
	if i ne [1,2,9,16]
		v[i]:=1;
	else
		v[i]:=0;
	end if
end for
//end function

G:=Sym(64);
//ElementToSequence(g) entspricht Transformation von Permutation zu Folge
//t:=[i: i in [1..64]];
//t^ip;
//Die Idee muss umgesetzt werden!!

PC1:=G! (1,57,8) (2,49,29,63,16) (3,41,30,55,12,34,23,11,42,22,19,43,14,18,51,13,26,52,5,25,60,24) (4,33,31,47,45,61,56)(32,39,46,53,28,36,7,9,58)(40,38,54,20,35,15,10,50,21,27,44,6,17,59)(48,37,62) ;
D0:=[1..28 by 1]; // zweiten 16 Bits von PC1
C0:=[1..28 by 1]; //erste 16 Bits von PC1
t:=inputkey^PC1;
for i:= 1 to 28
D0[i]:=t[i+16]
C0[i]:=t[i] 
end for


return outputkeys;
end function